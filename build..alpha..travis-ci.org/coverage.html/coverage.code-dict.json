{"/home/travis/build/npmtest/node-npmtest-resemblejs/test.js":"/* istanbul instrument in package npmtest_resemblejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-resemblejs/lib.npmtest_resemblejs.js":"/* istanbul instrument in package npmtest_resemblejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_resemblejs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_resemblejs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-resemblejs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-resemblejs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_resemblejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_resemblejs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_resemblejs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_resemblejs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_resemblejs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_resemblejs.__dirname + '/lib.npmtest_resemblejs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-resemblejs/node_modules/resemblejs/resemble.js":"/*\r\nJames Cryer / Huddle 2015\r\nURL: https://github.com/Huddle/Resemble.js\r\n*/\r\n\r\n(function (root, factory) {\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine([], factory);\r\n\t} else if (typeof module === 'object' && module.exports) {\r\n\t\tmodule.exports = factory();\r\n\t} else {\r\n\t\troot.resemble = factory();\r\n\t}\r\n}(this, function () {\r\n\t'use strict';\r\n\r\n\tvar pixelTransparency = 1;\r\n\r\n\tvar errorPixelColor = { // Color for Error Pixels. Between 0 and 255.\r\n\t\tred: 255,\r\n\t\tgreen: 0,\r\n\t\tblue: 255,\r\n\t\talpha: 255\r\n\t};\r\n\r\n\tvar targetPix = {r: 0, g: 0, b: 0, a: 0}; // isAntialiased\r\n\r\n\tfunction colorsDistance(c1, c2){\r\n\t\treturn (Math.abs(c1.r - c2.r) + Math.abs(c1.g - c2.g) + Math.abs(c1.b - c2.b))/3;\r\n\t}\r\n\r\n\tvar errorPixelTransform = {\r\n\t\tflat: function (px, offset, d1, d2) {\r\n\t\t\tpx[offset] = errorPixelColor.red;\r\n\t\t\tpx[offset + 1] = errorPixelColor.green;\r\n\t\t\tpx[offset + 2] = errorPixelColor.blue;\r\n\t\t\tpx[offset + 3] = errorPixelColor.alpha;\r\n\t\t},\r\n\t\tmovement: function (px, offset, d1, d2) {\r\n\t\t\tpx[offset] = ((d2.r * (errorPixelColor.red / 255)) + errorPixelColor.red) / 2;\r\n\t\t\tpx[offset + 1] = ((d2.g * (errorPixelColor.green / 255)) + errorPixelColor.green) / 2;\r\n\t\t\tpx[offset + 2] = ((d2.b * (errorPixelColor.blue / 255)) + errorPixelColor.blue) / 2;\r\n\t\t\tpx[offset + 3] = d2.a;\r\n\t\t},\r\n\t\tflatDifferenceIntensity: function (px, offset, d1, d2) {\r\n\t\t\tpx[offset] = errorPixelColor.red;\r\n\t\t\tpx[offset + 1] = errorPixelColor.green;\r\n\t\t\tpx[offset + 2] = errorPixelColor.blue;\r\n\t\t\tpx[offset + 3] = colorsDistance(d1, d2);\r\n\t\t},\r\n\t\tmovementDifferenceIntensity: function (px, offset, d1, d2) {\r\n\t\t\tvar ratio = colorsDistance(d1, d2) / 255 * 0.8;\r\n\r\n\t\t\tpx[offset] = ((1 - ratio) * (d2.r * (errorPixelColor.red / 255)) + ratio * errorPixelColor.red);\r\n\t\t\tpx[offset + 1] = ((1 - ratio) * (d2.g * (errorPixelColor.green / 255)) + ratio * errorPixelColor.green);\r\n\t\t\tpx[offset + 2] = ((1 - ratio) * (d2.b * (errorPixelColor.blue / 255)) + ratio * errorPixelColor.blue);\r\n\t\t\tpx[offset + 3] = d2.a;\r\n\t\t}\r\n\t};\r\n\r\n\tvar errorPixel = errorPixelTransform.flat;\r\n\tvar largeImageThreshold = 1200;\r\n\tvar useCrossOrigin = true;\r\n\tvar document = typeof window != \"undefined\" ? window.document : {};\r\n\r\n\tvar resemble = function( fileData ){\r\n\r\n\t\tvar data = {};\r\n\t\tvar images = [];\r\n\t\tvar updateCallbackArray = [];\r\n\r\n\t\tvar tolerance = { // between 0 and 255\r\n\t\t\tred: 16,\r\n\t\t\tgreen: 16,\r\n\t\t\tblue: 16,\r\n\t\t\talpha: 16,\r\n\t\t\tminBrightness: 16,\r\n\t\t\tmaxBrightness: 240\r\n\t\t};\r\n\r\n\t\tvar ignoreAntialiasing = false;\r\n\t\tvar ignoreColors = false;\r\n\t\tvar scaleToSameSize = false;\r\n\r\n\t\tfunction triggerDataUpdate(){\r\n\t\t\tvar len = updateCallbackArray.length;\r\n\t\t\tvar i;\r\n\t\t\tfor(i=0;i<len;i++){\r\n\t\t\t\tif (typeof updateCallbackArray[i] === 'function'){\r\n\t\t\t\t\tupdateCallbackArray[i](data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction loop(w, h, callback){\r\n\t\t\tvar x,y;\r\n\r\n\t\t\tfor (x=0;x<w;x++){\r\n\t\t\t\tfor (y=0;y<h;y++){\r\n\t\t\t\t\tcallback(x, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction parseImage(sourceImageData, width, height){\r\n\r\n\t\t\tvar pixelCount = 0;\r\n\t\t\tvar redTotal = 0;\r\n\t\t\tvar greenTotal = 0;\r\n\t\t\tvar blueTotal = 0;\r\n\t\t\tvar alphaTotal = 0;\r\n\t\t\tvar brightnessTotal = 0;\r\n\t\t\tvar whiteTotal = 0;\r\n\t\t\tvar blackTotal = 0;\r\n\r\n\t\t\tloop(width, height, function(horizontalPos, verticalPos){\r\n\t\t\t\tvar offset = (verticalPos*width + horizontalPos) * 4;\r\n\t\t\t\tvar red = sourceImageData[offset];\r\n\t\t\t\tvar green = sourceImageData[offset + 1];\r\n\t\t\t\tvar blue = sourceImageData[offset + 2];\r\n\t\t\t\tvar alpha = sourceImageData[offset + 3];\r\n\t\t\t\tvar brightness = getBrightness(red,green,blue);\r\n\r\n\t\t\t\tif (red == green && red == blue && alpha) {\r\n\t\t\t\t\tif (red == 0) {\r\n\t\t\t\t\t\tblackTotal++\r\n\t\t\t\t\t} else if (red == 255) {\r\n\t\t\t\t\t\twhiteTotal++\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpixelCount++;\r\n\r\n\t\t\t\tredTotal += red / 255 * 100;\r\n\t\t\t\tgreenTotal += green / 255 * 100;\r\n\t\t\t\tblueTotal += blue / 255 * 100;\r\n\t\t\t\talphaTotal += (255 - alpha) / 255 * 100;\r\n\t\t\t\tbrightnessTotal += brightness / 255 * 100;\r\n\t\t\t});\r\n\r\n\t\t\tdata.red = Math.floor(redTotal / pixelCount);\r\n\t\t\tdata.green = Math.floor(greenTotal / pixelCount);\r\n\t\t\tdata.blue = Math.floor(blueTotal / pixelCount);\r\n\t\t\tdata.alpha = Math.floor(alphaTotal / pixelCount);\r\n\t\t\tdata.brightness = Math.floor(brightnessTotal / pixelCount);\r\n\t\t\tdata.white = Math.floor(whiteTotal / pixelCount * 100);\r\n\t\t\tdata.black = Math.floor(blackTotal / pixelCount * 100);\r\n\r\n\t\t\ttriggerDataUpdate();\r\n\t\t}\r\n\r\n\t\tfunction loadImageData( fileData, callback ){\r\n\t\t\tvar fileReader;\r\n\t\t\tvar hiddenImage = new Image();\r\n\r\n\t\t\tif(useCrossOrigin) {\r\n\t\t\t\thiddenImage.setAttribute('crossorigin', 'anonymous');\r\n\t\t\t}\r\n\r\n\t\t\thiddenImage.onerror = function () { \r\n\t\t\t\thiddenImage.onerror = null; //fixes pollution between calls\r\n\t\t\t\timages.push({ error : \"Image load error.\"});\r\n\t\t\t\tcallback(); \r\n\t\t\t};\r\n\r\n\t\t\thiddenImage.onload = function() {\r\n\t\t\t\thiddenImage.onload = null; //fixes pollution between calls\r\n\r\n\t\t\t\tvar hiddenCanvas =  document.createElement('canvas');\r\n\t\t\t\tvar imageData;\r\n\r\n\t\t\t\t// don't assign to hiddenImage, see https://github.com/Huddle/Resemble.js/pull/87/commits/300d43352a2845aad289b254bfbdc7cd6a37e2d7\r\n\t\t\t\tvar width = hiddenImage.width;\r\n\t\t\t\tvar height = hiddenImage.height;\r\n\r\n\t\t\t\tif( scaleToSameSize && images.length == 1 ){\r\n\t\t\t\t\twidth   = images[0].width;\r\n\t\t\t\t\theight  = images[0].height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\thiddenCanvas.width = width;\r\n\t\t\t\thiddenCanvas.height = height;\r\n\r\n\t\t\t\thiddenCanvas.getContext('2d').drawImage(hiddenImage, 0, 0, width, height);\r\n\t\t\t\timageData = hiddenCanvas.getContext('2d').getImageData(0, 0, width, height);\r\n\r\n\t\t\t\timages.push(imageData);\r\n\r\n\t\t\t\tcallback(imageData, width, height);\r\n\t\t\t};\r\n\r\n\t\t\tif (typeof fileData === 'string') {\r\n\t\t\t\thiddenImage.src = fileData;\r\n\t\t\t\tif (hiddenImage.complete && hiddenImage.naturalWidth > 0) {\r\n\t\t\t\t\thiddenImage.onload();\r\n\t\t\t\t}\r\n\t\t\t} else if (typeof fileData.data !== 'undefined'\r\n\t\t\t\t\t&& typeof fileData.width === 'number'\r\n\t\t\t\t\t&& typeof fileData.height === 'number') {\r\n\r\n\t\t\t\timages.push(fileData);\r\n\r\n\t\t\t\tcallback(fileData, fileData.width, fileData.height);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tfileReader = new FileReader();\r\n\t\t\t\tfileReader.onload = function (event) {\r\n\t\t\t\t\thiddenImage.src = event.target.result;\r\n\t\t\t\t};\r\n\t\t\t\tfileReader.readAsDataURL(fileData);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction isColorSimilar(a, b, color){\r\n\r\n\t\t\tvar absDiff = Math.abs(a - b);\r\n\r\n\t\t\tif(typeof a === 'undefined'){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(typeof b === 'undefined'){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif(a === b){\r\n\t\t\t\treturn true;\r\n\t\t\t} else if ( absDiff < tolerance[color] ) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction isPixelBrightnessSimilar(d1, d2){\r\n\t\t\tvar alpha = isColorSimilar(d1.a, d2.a, 'alpha');\r\n\t\t\tvar brightness = isColorSimilar(d1.brightness, d2.brightness, 'minBrightness');\r\n\t\t\treturn brightness && alpha;\r\n\t\t}\r\n\r\n\t\tfunction getBrightness(r,g,b){\r\n\t\t\treturn 0.3*r + 0.59*g + 0.11*b;\r\n\t\t}\r\n\r\n\t\tfunction isRGBSame(d1,d2){\r\n\t\t\tvar red = d1.r === d2.r;\r\n\t\t\tvar green = d1.g === d2.g;\r\n\t\t\tvar blue = d1.b === d2.b;\r\n\t\t\treturn red && green && blue;\r\n\t\t}\r\n\r\n\t\tfunction isRGBSimilar(d1, d2){\r\n\t\t\tvar red = isColorSimilar(d1.r,d2.r,'red');\r\n\t\t\tvar green = isColorSimilar(d1.g,d2.g,'green');\r\n\t\t\tvar blue = isColorSimilar(d1.b,d2.b,'blue');\r\n\t\t\tvar alpha = isColorSimilar(d1.a, d2.a, 'alpha');\r\n\r\n\t\t\treturn red && green && blue && alpha;\r\n\t\t}\r\n\r\n\t\tfunction isContrasting(d1, d2){\r\n\t\t\treturn Math.abs(d1.brightness - d2.brightness) > tolerance.maxBrightness;\r\n\t\t}\r\n\r\n\t\tfunction getHue(r,g,b){\r\n\r\n\t\t\tr = r / 255;\r\n\t\t\tg = g / 255;\r\n\t\t\tb = b / 255;\r\n\t\t\tvar max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n\t\t\tvar h;\r\n\t\t\tvar d;\r\n\r\n\t\t\tif (max == min){\r\n\t\t\t\th = 0; // achromatic\r\n\t\t\t} else{\r\n\t\t\t\td = max - min;\r\n\t\t\t\tswitch(max){\r\n\t\t\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n\t\t\t\t\tcase g: h = (b - r) / d + 2; break;\r\n\t\t\t\t\tcase b: h = (r - g) / d + 4; break;\r\n\t\t\t\t}\r\n\t\t\t\th /= 6;\r\n\t\t\t}\r\n\r\n\t\t\treturn h;\r\n\t\t}\r\n\r\n\t\tfunction isAntialiased(sourcePix, data, cacheSet, verticalPos, horizontalPos, width){\r\n\t\t\tvar offset;\r\n\t\t\tvar distance = 1;\r\n\t\t\tvar i;\r\n\t\t\tvar j;\r\n\t\t\tvar hasHighContrastSibling = 0;\r\n\t\t\tvar hasSiblingWithDifferentHue = 0;\r\n\t\t\tvar hasEquivalentSibling = 0;\r\n\r\n\t\t\taddHueInfo(sourcePix);\r\n\r\n\t\t\tfor (i = distance*-1; i <= distance; i++){\r\n\t\t\t\tfor (j = distance*-1; j <= distance; j++){\r\n\r\n\t\t\t\t\tif(i===0 && j===0){\r\n\t\t\t\t\t\t// ignore source pixel\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\toffset = ((verticalPos+j)*width + (horizontalPos+i)) * 4;\r\n\r\n\t\t\t\t\t\tif(!getPixelInfo(targetPix , data, offset, cacheSet)){\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\taddBrightnessInfo(targetPix);\r\n\t\t\t\t\t\taddHueInfo(targetPix);\r\n\r\n\t\t\t\t\t\tif( isContrasting(sourcePix, targetPix) ){\r\n\t\t\t\t\t\t\thasHighContrastSibling++;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif( isRGBSame(sourcePix,targetPix) ){\r\n\t\t\t\t\t\t\thasEquivalentSibling++;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif( Math.abs(targetPix.h - sourcePix.h) > 0.3 ){\r\n\t\t\t\t\t\t\thasSiblingWithDifferentHue++;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif( hasSiblingWithDifferentHue > 1 || hasHighContrastSibling > 1){\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(hasEquivalentSibling < 2){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tfunction copyPixel(px, offset, data){\r\n\t\t\tpx[offset] = data.r; //r\r\n\t\t\tpx[offset + 1] = data.g; //g\r\n\t\t\tpx[offset + 2] = data.b; //b\r\n\t\t\tpx[offset + 3] = data.a * pixelTransparency; //a\r\n\t\t}\r\n\r\n\t\tfunction copyGrayScalePixel(px, offset, data){\r\n\t\t\tpx[offset] = data.brightness; //r\r\n\t\t\tpx[offset + 1] = data.brightness; //g\r\n\t\t\tpx[offset + 2] = data.brightness; //b\r\n\t\t\tpx[offset + 3] = data.a * pixelTransparency; //a\r\n\t\t}\r\n\r\n\t\tfunction getPixelInfo(dst, data, offset, cacheSet) {\r\n\t\t\tif (data.length > offset) {\r\n\t\t\t\tdst.r = data[offset];\r\n\t\t\t\tdst.g = data[offset + 1];\r\n\t\t\t\tdst.b = data[offset + 2];\r\n\t\t\t\tdst.a = data[offset + 3];\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tfunction addBrightnessInfo(data){\r\n\t\t\tdata.brightness = getBrightness(data.r,data.g,data.b); // 'corrected' lightness\r\n\t\t}\r\n\r\n\t\tfunction addHueInfo(data){\r\n\t\t\tdata.h = getHue(data.r,data.g,data.b);\r\n\t\t}\r\n\r\n\t\tfunction analyseImages(img1, img2, width, height){\r\n\r\n\t\t\tvar hiddenCanvas = document.createElement('canvas');\r\n\r\n\t\t\tvar data1 = img1.data;\r\n\t\t\tvar data2 = img2.data;\r\n\r\n\t\t\thiddenCanvas.width = width;\r\n\t\t\thiddenCanvas.height = height;\r\n\r\n\t\t\tvar context = hiddenCanvas.getContext('2d');\r\n\t\t\tvar imgd = context.createImageData(width,height);\r\n\t\t\tvar targetPix = imgd.data;\r\n\r\n\t\t\tvar mismatchCount = 0;\r\n\t\t\tvar diffBounds = {\r\n\t\t\t\ttop: height,\r\n\t\t\t\tleft: width,\r\n\t\t\t\tbottom: 0,\r\n\t\t\t\tright: 0\r\n\t\t\t};\r\n\t\t\tvar updateBounds = function(x, y) {\r\n\t\t\t\tdiffBounds.left = Math.min(x, diffBounds.left);\r\n\t\t\t\tdiffBounds.right = Math.max(x, diffBounds.right);\r\n\t\t\t\tdiffBounds.top = Math.min(y, diffBounds.top);\r\n\t\t\t\tdiffBounds.bottom = Math.max(y, diffBounds.bottom);\r\n\t\t\t};\r\n\r\n\t\t\tvar time = Date.now();\r\n\r\n\t\t\tvar skip;\r\n\r\n\t\t\tif(!!largeImageThreshold && ignoreAntialiasing && (width > largeImageThreshold || height > largeImageThreshold)){\r\n\t\t\t\tskip = 6;\r\n\t\t\t}\r\n\r\n\t\t\tvar pixel1 = {r: 0, g: 0, b: 0, a: 0};\r\n\t\t\tvar pixel2 = { r: 0, g: 0, b: 0, a: 0 };\r\n\r\n\t\t\tloop(width, height, function(horizontalPos, verticalPos){\r\n\r\n\t\t\t\tif(skip){ // only skip if the image isn't small\r\n\t\t\t\t\tif(verticalPos % skip === 0 || horizontalPos % skip === 0){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar offset = (verticalPos*width + horizontalPos) * 4;\r\n\r\n\t\t\t\tif (!getPixelInfo(pixel1, data1, offset, 1) || !getPixelInfo(pixel2, data2, offset, 2)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ignoreColors){\r\n\r\n\t\t\t\t\taddBrightnessInfo(pixel1);\r\n\t\t\t\t\taddBrightnessInfo(pixel2);\r\n\r\n\t\t\t\t\tif( isPixelBrightnessSimilar(pixel1, pixel2) ){\r\n\t\t\t\t\t\tcopyGrayScalePixel(targetPix, offset, pixel2);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\terrorPixel(targetPix, offset, pixel1, pixel2);\r\n\t\t\t\t\t\tmismatchCount++;\r\n\t\t\t\t\t\tupdateBounds(horizontalPos, verticalPos);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif( isRGBSimilar(pixel1, pixel2) ){\r\n\t\t\t\t\tcopyPixel(targetPix, offset, pixel1, pixel2);\r\n\r\n\t\t\t\t} else if( ignoreAntialiasing && (\r\n\t\t\t\t\t\taddBrightnessInfo(pixel1), // jit pixel info augmentation looks a little weird, sorry.\r\n\t\t\t\t\t\taddBrightnessInfo(pixel2),\r\n\t\t\t\t\t\tisAntialiased(pixel1, data1, 1, verticalPos, horizontalPos, width) ||\r\n\t\t\t\t\t\tisAntialiased(pixel2, data2, 2, verticalPos, horizontalPos, width)\r\n\t\t\t\t\t)){\r\n\r\n\t\t\t\t\tif( isPixelBrightnessSimilar(pixel1, pixel2) ){\r\n\t\t\t\t\t\tcopyGrayScalePixel(targetPix, offset, pixel2);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\terrorPixel(targetPix, offset, pixel1, pixel2);\r\n\t\t\t\t\t\tmismatchCount++;\r\n\t\t\t\t\t\tupdateBounds(horizontalPos, verticalPos);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\terrorPixel(targetPix, offset, pixel1, pixel2);\r\n\t\t\t\t\tmismatchCount++;\r\n\t\t\t\t\tupdateBounds(horizontalPos, verticalPos);\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t\tdata.rawMisMatchPercentage = (mismatchCount / (height*width) * 100);\r\n\t\t\tdata.misMatchPercentage = data.rawMisMatchPercentage.toFixed(2);\r\n\t\t\tdata.diffBounds = diffBounds;\r\n\t\t\tdata.analysisTime = Date.now() - time;\r\n\r\n\t\t\tdata.getImageDataUrl = function(text){\r\n\t\t\t\tvar barHeight = 0;\r\n\r\n\t\t\t\tif(text){\r\n\t\t\t\t\tbarHeight = addLabel(text,context,hiddenCanvas);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontext.putImageData(imgd, 0, barHeight);\r\n\r\n\t\t\t\treturn hiddenCanvas.toDataURL(\"image/png\");\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfunction addLabel(text, context, hiddenCanvas){\r\n\t\t\tvar textPadding = 2;\r\n\r\n\t\t\tcontext.font = '12px sans-serif';\r\n\r\n\t\t\tvar textWidth = context.measureText(text).width + textPadding*2;\r\n\t\t\tvar barHeight = 22;\r\n\r\n\t\t\tif(textWidth > hiddenCanvas.width){\r\n\t\t\t\thiddenCanvas.width = textWidth;\r\n\t\t\t}\r\n\r\n\t\t\thiddenCanvas.height += barHeight;\r\n\r\n\t\t\tcontext.fillStyle = \"#666\";\r\n\t\t\tcontext.fillRect(0,0,hiddenCanvas.width,barHeight -4);\r\n\t\t\tcontext.fillStyle = \"#fff\";\r\n\t\t\tcontext.fillRect(0,barHeight -4,hiddenCanvas.width, 4);\r\n\r\n\t\t\tcontext.fillStyle = \"#fff\";\r\n\t\t\tcontext.textBaseline = \"top\";\r\n\t\t\tcontext.font = '12px sans-serif';\r\n\t\t\tcontext.fillText(text, textPadding, 1);\r\n\r\n\t\t\treturn barHeight;\r\n\t\t}\r\n\r\n\t\tfunction normalise(img, w, h){\r\n\t\t\tvar c;\r\n\t\t\tvar context;\r\n\r\n\t\t\tif(img.height < h || img.width < w){\r\n\t\t\t\tc = document.createElement('canvas');\r\n\t\t\t\tc.width = w;\r\n\t\t\t\tc.height = h;\r\n\t\t\t\tcontext = c.getContext('2d');\r\n\t\t\t\tcontext.putImageData(img, 0, 0);\r\n\t\t\t\treturn context.getImageData(0, 0, w, h);\r\n\t\t\t}\r\n\r\n\t\t\treturn img;\r\n\t\t}\r\n\r\n\t\tfunction compare(one, two){\r\n\r\n\t\t\tfunction onceWeHaveBoth(){\r\n\t\t\t\tvar width;\r\n\t\t\t\tvar height;\r\n\t\t\t\tif(images.length === 2){\r\n\t\t\t\t\tif( images[0].error || images[1].error ){\r\n\t\t\t\t\t\tdata = {};\r\n\t\t\t\t\t\tdata.error = images[0].error ?  images[0].error : images[1].error;\r\n\t\t\t\t\t\ttriggerDataUpdate();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\twidth = images[0].width > images[1].width ? images[0].width : images[1].width;\r\n\t\t\t\t\theight = images[0].height > images[1].height ? images[0].height : images[1].height;\r\n\r\n\t\t\t\t\tif( (images[0].width === images[1].width) && (images[0].height === images[1].height) ){\r\n\t\t\t\t\t\tdata.isSameDimensions = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdata.isSameDimensions = false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdata.dimensionDifference = { width: images[0].width - images[1].width, height: images[0].height - images[1].height };\r\n\r\n\t\t\t\t\tanalyseImages( normalise(images[0],width, height), normalise(images[1],width, height), width, height);\r\n\r\n\t\t\t\t\ttriggerDataUpdate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\timages = [];\r\n\t\t\tloadImageData(one, onceWeHaveBoth);\r\n\t\t\tloadImageData(two, onceWeHaveBoth);\r\n\t\t}\r\n\r\n\t\tfunction getCompareApi(param){\r\n\r\n\t\t\tvar secondFileData,\r\n\t\t\t\thasMethod = typeof param === 'function';\r\n\r\n\t\t\tif( !hasMethod ){\r\n\t\t\t\t// assume it's file data\r\n\t\t\t\tsecondFileData = param;\r\n\t\t\t}\r\n\r\n\t\t\tvar self = {\r\n\t\t\t\tscaleToSameSize: function(){\r\n\t\t\t\t\tscaleToSameSize = true;\r\n\r\n\t\t\t\t\tif(hasMethod) { param(); }\r\n\t\t\t\t\treturn self;\r\n\t\t\t\t},\r\n\t\t\t\tuseOriginalSize: function(){\r\n\t\t\t\t\tscaleToSameSize = false;\r\n\r\n\t\t\t\t\tif(hasMethod) { param(); }\r\n\t\t\t\t\treturn self;\r\n\t\t\t\t},\r\n\t\t\t\tignoreNothing: function(){\r\n\r\n\t\t\t\t\ttolerance.red = 0;\r\n\t\t\t\t\ttolerance.green = 0;\r\n\t\t\t\t\ttolerance.blue = 0;\r\n\t\t\t\t\ttolerance.alpha = 0;\r\n\t\t\t\t\ttolerance.minBrightness = 0;\r\n\t\t\t\t\ttolerance.maxBrightness = 255;\r\n\r\n\t\t\t\t\tignoreAntialiasing = false;\r\n\t\t\t\t\tignoreColors = false;\r\n\r\n\t\t\t\t\tif(hasMethod) { param(); }\r\n\t\t\t\t\treturn self;\r\n\t\t\t\t},\r\n\t\t\t\tignoreLess: function(){\r\n\r\n\t\t\t\t\ttolerance.red = 16;\r\n\t\t\t\t\ttolerance.green = 16;\r\n\t\t\t\t\ttolerance.blue = 16;\r\n\t\t\t\t\ttolerance.alpha = 16;\r\n\t\t\t\t\ttolerance.minBrightness = 16;\r\n\t\t\t\t\ttolerance.maxBrightness = 240;\r\n\r\n\t\t\t\t\tignoreAntialiasing = false;\r\n\t\t\t\t\tignoreColors = false;\r\n\r\n\t\t\t\t\tif(hasMethod) { param(); }\r\n\t\t\t\t\treturn self;\r\n\t\t\t\t},\r\n\t\t\t\tignoreAntialiasing: function(){\r\n\r\n\t\t\t\t\ttolerance.red = 32;\r\n\t\t\t\t\ttolerance.green = 32;\r\n\t\t\t\t\ttolerance.blue = 32;\r\n\t\t\t\t\ttolerance.alpha = 32;\r\n\t\t\t\t\ttolerance.minBrightness = 64;\r\n\t\t\t\t\ttolerance.maxBrightness = 96;\r\n\r\n\t\t\t\t\tignoreAntialiasing = true;\r\n\t\t\t\t\tignoreColors = false;\r\n\r\n\t\t\t\t\tif(hasMethod) { param(); }\r\n\t\t\t\t\treturn self;\r\n\t\t\t\t},\r\n\t\t\t\tignoreColors: function(){\r\n\r\n\t\t\t\t\ttolerance.alpha = 16;\r\n\t\t\t\t\ttolerance.minBrightness = 16;\r\n\t\t\t\t\ttolerance.maxBrightness = 240;\r\n\r\n\t\t\t\t\tignoreAntialiasing = false;\r\n\t\t\t\t\tignoreColors = true;\r\n\r\n\t\t\t\t\tif(hasMethod) { param(); }\r\n\t\t\t\t\treturn self;\r\n\t\t\t\t},\r\n\t\t\t\trepaint: function(){\r\n\t\t\t\t\tif(hasMethod) { param(); }\r\n\t\t\t\t\treturn self;\r\n\t\t\t\t},\r\n\t\t\t\tonComplete: function( callback ){\r\n\r\n\t\t\t\t\tupdateCallbackArray.push(callback);\r\n\r\n\t\t\t\t\tvar wrapper = function(){\r\n\t\t\t\t\t\tcompare(fileData, secondFileData);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\twrapper();\r\n\r\n\t\t\t\t\treturn getCompareApi(wrapper);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\treturn self;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tonComplete: function( callback ){\r\n\t\t\t\tupdateCallbackArray.push(callback);\r\n\t\t\t\tloadImageData(fileData, function(imageData, width, height){\r\n\t\t\t\t\tparseImage(imageData.data, width, height);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tcompareTo: function(secondFileData){\r\n\t\t\t\treturn getCompareApi(secondFileData);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tresemble.outputSettings = function(options){\r\n\t\tvar key;\r\n\t\tvar undefined;\r\n\r\n\t\tif(options.errorColor){\r\n\t\t\tfor (key in options.errorColor) {\r\n\t\t\t\terrorPixelColor[key] = options.errorColor[key] === undefined ? errorPixelColor[key] : options.errorColor[key];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(options.errorType && errorPixelTransform[options.errorType] ){\r\n\t\t\terrorPixel = errorPixelTransform[options.errorType];\r\n\t\t}\r\n\r\n\t\tpixelTransparency = isNaN(Number(options.transparency)) ? pixelTransparency : options.transparency;\r\n\r\n\t\tif (options.largeImageThreshold !== undefined) {\r\n\t\t\tlargeImageThreshold = options.largeImageThreshold;\r\n\t\t}\r\n\r\n\t\tif (options.useCrossOrigin !== undefined) {\r\n\t\t\tuseCrossOrigin = options.useCrossOrigin;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t};\r\n\r\n\treturn resemble;\r\n}));\r\n"}